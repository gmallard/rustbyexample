A crate is a compilation unit in Rust. Whenever rustc some_file.rs is 
called, some_file.rs is treated as the crate file. If some_file.rs has 
mod declarations in it, then the contents of the module files will get 
merged with the crate file before running the compiler over it. In other 
words, modules do not get compiled individually, only crates get compiled.

A crate can be compiled into a binary or into a library. By default, 
rustc will produce a binary from a crate. This behavior can be overridden 
by passing the --crate-type flag to rustc.

To run this example:

cd src # below this directory

then:

# Create the library:

$ rustc --crate-type=lib rary.rs
$ ls lib*
library.rlib

# Compile and run the main program.
# The `-L .` argument adds the current directory to the library search path
$ rustc -L . main.rs && ./main

# Output:
called rary's `public_function()`
called rary's `indirect_access()`, that
> called rary's `private_function()`

